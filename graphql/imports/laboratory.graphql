type Laboratory {
    id: ID!
    name: String
    address: String
    created_at: DateTime
    updated_at: DateTime
}

type ResponseDelete {
    message: String
    deleted: Boolean
}

input LaboratoryInput
    @validator(
        class: "App\\Modules\\Laboratory\\GraphQL\\Validators\\LaboratoryInputValidator"
    ) {
    name: String
    address: String
}

extend type Query {
    laboratory(id: ID! @eq): Laboratory! @find
    laboratories(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
        "Filters by document"
        document: Int @where(operator: "=")
    ): [Laboratory!]! @paginate(defaultCount: 10)
}

extend type Mutation {
    createLaboratory(input: LaboratoryInput! @spread): Laboratory!
        @field(
            resolver: "App\\Modules\\Laboratory\\GraphQL\\Mutations\\CreateLaboratory"
        )
    updateLaboratory(input: LaboratoryInput! @spread): Laboratory!
        @field(
            resolver: "App\\Modules\\Laboratory\\GraphQL\\Mutations\\CreateLaboratory"
        )
    deleteLaboratory(id: Int!): ResponseDelete!
        @field(
            resolver: "App\\Modules\\Laboratory\\GraphQL\\Mutations\\DeleteLaboratory"
        )
}
